(function (factory) {
    if (typeof module === "object" && typeof module.exports === "object") {
        var v = factory(require, exports);
        if (v !== undefined) module.exports = v;
    }
    else if (typeof define === "function" && define.amd) {
        define(["require", "exports", "./TimeSpan"], factory);
    }
})(function (require, exports) {
    "use strict";
    Object.defineProperty(exports, "__esModule", { value: true });
    const TimeSpan_1 = require("./TimeSpan");
    /**
     * DateTime differs from Date in following cases,
     * 1. DateTime is immutable, however underlying object is Date
     *    but all methods specific to DateTime are immutable
     * 2. DateTime has readonly properties for `day, month, year etc`
     * 3. DateTime is derived from Date so passing DateTime to existing
     *    code will not change anything, however intellisense does not display
     *    any methods of Date unless you explicity cast as Date, but instanceof
     *    works correctly
     * 4. DateTime does not modify underlying Date prototype or add any methods to it
     * ``` typescript
     * DateTime dt = DateTime.now();
     * (dt instanceof Date) // is true
     * (dt instanceof DateTime) // is also true
     * ```
     */
    class DateTime {
        /**
         * Returns DateTime new instance from Date or String, if d is DateTime already
         * it will return the d.
         * @param d Date | DateTime | string
         * @returns DateTime
         */
        static from(d) {
            if (!d) {
                return null;
            }
            if (!(d instanceof DateTime)) {
                if (d instanceof Date) {
                    d = new DateTime(d.getTime());
                }
                return new DateTime(d);
            }
            return d;
        }
        /**
         * Current date without time
         */
        static get today() {
            const a = new DateTime();
            return a.date;
        }
        /**
         * Current UTC Date
         */
        static get utcNow() {
            const now = new Date();
            return new DateTime(now.getTime() + now.getTimezoneOffset());
        }
        /**
         * DateTime at right now
         */
        static get now() {
            return new DateTime();
        }
        static parse(s) {
            return new DateTime(s);
        }
        /** Day of month */
        get day() {
            return this.getDate();
        }
        /** Day of week */
        get dayOfWeek() {
            return this.getDay();
        }
        /**
         * Current month, 0 is January
         */
        get month() {
            return this.getMonth();
        }
        /**
         * Current full year
         */
        get year() {
            return this.getFullYear();
        }
        /**
         * Current hour of the day
         */
        get hour() {
            return this.getHours();
        }
        /**
         * Current minute of the hour
         */
        get minute() {
            return this.getMinutes();
        }
        /**
         * Current second of the minute
         */
        get second() {
            return this.getSeconds();
        }
        get milliSecond() {
            return this.getMilliseconds();
        }
        /**
         * Timezone offset as TimeSpan
         */
        get timeZoneOffset() {
            return TimeSpan_1.default.fromMinutes(this.getTimezoneOffset());
        }
        /**
         * Milliseconds since EPOCH, ie total number of milliseconds
         * of underlying Date object
         */
        get msSinceEpoch() {
            return this.getTime();
        }
        /**
         * Strips time of the day and returns Date only
         */
        get date() {
            const d = new DateTime(this.getFullYear(), this.getMonth(), this.getDate(), 0, 0, 0, 0);
            return d;
        }
        /**
         * Just for convenience, avoid using this, instead use methods of DateTime
         * or suggest better method at our github repo
         */
        get asJSDate() {
            return this;
        }
        /**
         * Gets time of the day in TimeSpan format
         */
        get time() {
            return new TimeSpan_1.default(0, this.getHours(), this.getMinutes(), this.getSeconds(), this.getMilliseconds());
        }
        /**
         * Creates new DateTime instance from given input,
         * input parameters are exactly same as `Date`
         */
        constructor(a, b, c, d, e, f, g) {
            let rd;
            switch (arguments.length) {
                case 0:
                    rd = new Date();
                    break;
                case 1:
                    rd = new Date(a);
                    break;
                case 2:
                    rd = new Date(a, b);
                    break;
                case 3:
                    rd = new Date(a, b, c);
                    break;
                case 4:
                    rd = new Date(a, b, c, d);
                    break;
                case 5:
                    rd = new Date(a, b, c, d, e);
                    break;
                case 6:
                    rd = new Date(a, b, c, d, e, f);
                    break;
                default:
                    rd = new Date(a, b, c, d, e, f, g);
            }
            Object.setPrototypeOf(rd, DateTime.prototype);
            return rd;
        }
        add(t, hours, minutes, seconds, milliseconds) {
            if (t instanceof Date) {
                return new DateTime(this.getTime() + t.getTime());
            }
            let days = 0;
            if (t instanceof TimeSpan_1.default) {
                days = t.days;
                hours = t.hours;
                minutes = t.minutes;
                seconds = t.seconds;
                milliseconds = t.milliseconds;
            }
            else {
                days = t;
            }
            function hasValue(n, name) {
                if (n === undefined) {
                    return false;
                }
                if (n === null) {
                    throw new Error(`${name} cannot be null`);
                }
                return n !== 0;
            }
            const d = new Date(this.getTime());
            if (hasValue(days, "days")) {
                d.setDate(d.getDate() + days);
            }
            if (hasValue(hours, "hours")) {
                d.setHours(d.getHours() + hours);
            }
            if (hasValue(minutes, "minutes")) {
                d.setMinutes(d.getMinutes() + minutes);
            }
            if (hasValue(seconds, "seconds")) {
                d.setSeconds(d.getSeconds() + seconds);
            }
            if (hasValue(milliseconds, "milliseconds")) {
                d.setMilliseconds(d.getMilliseconds() + milliseconds);
            }
            Object.setPrototypeOf(d, DateTime.prototype);
            return d;
        }
        addMonths(m) {
            const d = new Date(this.msSinceEpoch);
            d.setMonth(d.getMonth() + m);
            Object.setPrototypeOf(d, DateTime.prototype);
            return d;
        }
        addYears(y) {
            const d = new Date(this.msSinceEpoch);
            d.setFullYear(d.getFullYear() + y);
            Object.setPrototypeOf(d, DateTime.prototype);
            return d;
        }
        addDays(day) {
            const d = new Date(this.msSinceEpoch);
            d.setDate(d.getDate() + day);
            Object.setPrototypeOf(d, DateTime.prototype);
            return d;
        }
        addHours(h) {
            const d = new Date(this.msSinceEpoch);
            d.setHours(d.getHours() + h);
            Object.setPrototypeOf(d, DateTime.prototype);
            return d;
        }
        addMinutes(m) {
            const d = new Date(this.msSinceEpoch);
            d.setMinutes(d.getMinutes() + m);
            Object.setPrototypeOf(d, DateTime.prototype);
            return d;
        }
        /**
         * Returns TimeSpan from subtracting rhs from this,
         * `const ts = lhs.diff(rhs); // ts = lhs - rhs`
         * @param rhs Right hand side
         * @returns TimeSpan
         */
        diff(rhs) {
            return new TimeSpan_1.default(this.getTime() - rhs.getTime());
        }
        equals(d) {
            if (!d) {
                return false;
            }
            return this.getTime() === d.getTime();
        }
        /**
         * Trims time part and compares the given dates
         * @param d date to test
         */
        dateEquals(d) {
            if (!d) {
                return false;
            }
            return this.date.equals(DateTime.from(d).date);
        }
        compare(d) {
            return this.getTime() - d.getTime();
        }
        toRelativeString(dt) {
            if (!dt) {
                dt = DateTime.now;
            }
            else {
                if (dt instanceof Date && !(dt instanceof DateTime)) {
                    dt.__proto__ = DateTime.prototype;
                    dt = dt;
                }
            }
            const diff = this.diff(dt);
            if (dt.year !== this.year) {
                return this.toLocaleDateString();
            }
            if (Math.abs(diff.totalDays) > 6) {
                return this.toLocaleDateString(undefined, { month: "short", day: "numeric" });
            }
            if (Math.abs(diff.totalHours) > 23) {
                return this.toLocaleDateString(undefined, { weekday: "short" });
            }
            if (Math.abs(diff.totalMinutes) > 59) {
                return `${Math.floor(diff.totalHours)} hours`;
            }
            return `${Math.floor(diff.totalMinutes)} mins`;
        }
        /**
         * Returns number so that DateTime in logical comparison
         * returns correct answer. Such as DateTime.from("2022-02-01") > DateTime.from("2021-02-01") returns true.
         * @returns Milliseconds since EPOCH
         */
        valueOf() {
            return this.getTime();
        }
    }
    exports.default = DateTime;
    // hack !! for ES5
    DateTime.prototype.__proto__ = Date.prototype;
    if (typeof window !== "undefined") {
        window.DateTime = DateTime;
    }
});
//# sourceMappingURL=DateTime.js.map